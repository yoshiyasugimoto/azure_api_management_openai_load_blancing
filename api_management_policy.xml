<policies>
    <inbound>
        <base />
        <cache-lookup-value key="listBackends" variable-name="listBackends" />
        <choose>
            <when condition="@(context.Variables.ContainsKey("listBackends") == false)">
                <set-variable name="listBackends" value="@{
                    JArray backends = new JArray();
                    backends.Add(new JObject()
                    {
                        { "backendId", "openai-v1-openai-endpoint" },
                        { "apiKey", "xxx" },
                        { "priority", 1},
                        { "isThrottling", false }, 
                        { "retryAfter", DateTime.MinValue } 
                    });
                    backends.Add(new JObject()
                    {
                        { "backendId", "openai-v2-openai-endpoint" },
                        { "apiKey", "xxx" },
                        { "priority", 2},
                        { "isThrottling", false }, 
                        { "retryAfter", DateTime.MinValue } 
                    });
                    backends.Add(new JObject()
                    {
                        { "backendId", "openai-v3-openai-endpoint" },
                        { "apiKey", "xxx" },
                        { "priority", 3},
                        { "isThrottling", false },
                        { "retryAfter", DateTime.MinValue }
                    });
                    backends.Add(new JObject()
                    {
                        { "backendId", "openai-v4-openai-endpoint" },
                        { "apiKey", "xxx" },
                        { "priority", 4},
                        { "isThrottling", false },
                        { "retryAfter", DateTime.MinValue }
                    });
                    backends.Add(new JObject()
                    {
                        { "backendId", "openai-v5-openai-endpoint" },
                        { "apiKey", "xxx" },
                        { "priority", 5},
                        { "isThrottling", false },
                        { "retryAfter", DateTime.MinValue }
                    });
                    return backends;   
                }" />
                <cache-store-value key="listBackends" value="@((JArray)context.Variables["listBackends"])" duration="60" />
            </when>
        </choose>
        <set-variable name="backendIndex" value="-1" />
        <set-variable name="remainingBackends" value="1" />
    </inbound>
    <backend>
        <retry condition="@(context.Response != null && (context.Response.StatusCode == 400 || context.Response.StatusCode == 429 || context.Response.StatusCode >= 500) && ((Int32)context.Variables["remainingBackends"]) > 0)" count="50" interval="0">
            <set-variable name="listBackends" value="@{
                JArray backends = (JArray)context.Variables["listBackends"];
                for (int i = 0; i < backends.Count; i++)
                {
                    JObject backend = (JObject)backends[i];
                    if (backend.Value<bool>("isThrottling") && DateTime.Now >= backend.Value<DateTime>("retryAfter"))
                    {
                        backend["isThrottling"] = false;
                        backend["retryAfter"] = DateTime.MinValue;
                    }
                }
                return backends; 
            }" />
            <cache-store-value key="listBackends" value="@((JArray)context.Variables["listBackends"])" duration="60" />
            <set-variable name="backendIndex" value="@{
                JArray backends = (JArray)context.Variables["listBackends"];
                int selectedPriority = Int32.MaxValue;
                List<int> availableBackends = new List<int>();
                for (int i = 0; i < backends.Count; i++)
                {
                    JObject backend = (JObject)backends[i];

                    if (!backend.Value<bool>("isThrottling"))
                    {
                        int backendPriority = backend.Value<int>("priority");

                        if (backendPriority < selectedPriority)
                        {
                            selectedPriority = backendPriority;
                            availableBackends.Clear();
                            availableBackends.Add(i);
                        } 
                        else if (backendPriority == selectedPriority)
                        {
                            availableBackends.Add(i);
                        }
                    }
                }
                if (availableBackends.Count == 1)
                {
                    return availableBackends[0];
                }
                if (availableBackends.Count > 0)
                { 
                    return availableBackends[new Random().Next(0, availableBackends.Count)];
                }
                else
                {
                    return 0;    
                }
                }" />
            <set-variable name="backendId" value="@(((JObject)((JArray)context.Variables["listBackends"])[(Int32)context.Variables["backendIndex"]]).Value<string>("backendId"))" />
            <set-backend-service id="apim-generated-policy" backend-id="@((string)context.Variables["backendId"])" />
            <set-variable name="apiKey" value="@(((JObject)((JArray)context.Variables["listBackends"])[(Int32)context.Variables["backendIndex"]]).Value<string>("apiKey"))" />
            <set-header name="api-key" exists-action="override">
                <value>@((string)context.Variables["apiKey"])</value>
            </set-header>
            <forward-request buffer-request-body="true" />
            <choose>
                <!-- In case we got 429 or 5xx from a backend, update the list with its status -->
                <when condition="@(context.Response != null && (context.Response.StatusCode == 404 || context.Response.StatusCode == 429 || context.Response.StatusCode >= 500) )">
                    <cache-lookup-value key="listBackends" variable-name="listBackends" />
                    <set-variable name="listBackends" value="@{
                        JArray backends = (JArray)context.Variables["listBackends"];
                        int currentBackendIndex = context.Variables.GetValueOrDefault<int>("backendIndex");
                        int retryAfter = Convert.ToInt32(context.Response.Headers.GetValueOrDefault("Retry-After", "-1"));

                        if (retryAfter == -1)
                        {
                            retryAfter = Convert.ToInt32(context.Response.Headers.GetValueOrDefault("x-ratelimit-reset-requests", "-1"));
                        }

                        if (retryAfter == -1)
                        {
                            retryAfter = Convert.ToInt32(context.Response.Headers.GetValueOrDefault("x-ratelimit-reset-tokens", "10"));
                        }

                        JObject backend = (JObject)backends[currentBackendIndex];
                        backend["isThrottling"] = true;
                        backend["retryAfter"] = DateTime.Now.AddSeconds(retryAfter);

                        return backends;      
                    }" />
                    <cache-store-value key="listBackends" value="@((JArray)context.Variables["listBackends"])" duration="60" />
                    <set-variable name="remainingBackends" value="@{
                        JArray backends = (JArray)context.Variables["listBackends"];

                        int remainingBackends = 0;

                        for (int i = 0; i < backends.Count; i++)
                        {
                            JObject backend = (JObject)backends[i];

                            if (!backend.Value<bool>("isThrottling"))
                            {
                                remainingBackends++;
                            }
                        }

                        return remainingBackends;
                    }" />
                </when>
            </choose>
        </retry>
    </backend>
    <outbound>
        <base />
        <set-header name="x-openai-backendId" exists-action="override">
            <value>@(context.Variables.GetValueOrDefault<string>("backendId", "openai-v2-openai-endpoint"))</value>
        </set-header>
        <set-header name="x-openai-apiKey" exists-action="override">
            <value>@(context.Variables.GetValueOrDefault<string>("apiKey", "openai-v2-api-key"))</value>
        </set-header>
    </outbound>
    <on-error>
        <base />
    </on-error>
</policies>